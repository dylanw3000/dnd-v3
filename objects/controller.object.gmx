<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
show = 1;
animation_time = 30;

globalvar v1;
delay = 0;
delay_time = 10;

//Map setup
globalvar map;

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

node_init();

//Variables init
globalvar hover, active, phase;

turn = null;
phase = null;
active = null;
active_tile = null;
active_i = null;

advance = 0;
animation = 0;

alarm[0] = 1;

unit_spawner(5,5,warrior_o);
unit_spawner(4,7,esper_o);
unit_spawner(4,4,engineer_o);

unit_spawner(8,6,add_o);
unit_spawner(8,11,add_o);
unit_spawner(8,12,add_o);
unit_spawner(7,5,add_o);

unit_spawner(14,7,archer_o);
unit_spawner(13,5,archer_o);

unit_spawner(3,17,aoe_o);

//fort
unit_spawner(24,20,runner_o);

unit_spawner(15,14,add_o);
unit_spawner(15,15,add_o);
unit_spawner(15,16,add_o);

unit_spawner(15,17,archer_o);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
phase = "action";
advance = 1;
turn = 1;
active_i = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
gridX = floor(mouse_x/32);
gridY = floor(mouse_y/32);

if(gridX &gt;= 0 &amp;&amp; gridY &gt;= 0 &amp;&amp; gridX &lt; mapWidth &amp;&amp; gridY &lt; mapHeight){
    hover = map[gridX, gridY];
}
else{
    hover = null;
}

/*
if(hover != null){

}
*/

if(advance == 1){
    advance = 0;
    
    if(phase == "move"){
        phase = "action";
        reset_nodes();
        if(turn == 1 || target != null){
            attack_gen();
        }
        
        if(turn == 2){
            delay = delay_time;
        }
        //advance = 1;
    }
    else if(phase == "action"){
        phase = "move";
        active_i++;
        
        if(turn == 1){
            if(active_i &gt;= instance_number(ally_o)){
                active_i = 0;
                turn = 2;
            }
        }
        else if(turn == 2){
            if(active_i &gt;= instance_number(enemy_o)){
                active_i = 0;
                turn = 1;
            }
        }
        
        if(turn == 1){
            active = instance_find(ally_o,active_i);
        }
        else if(turn == 2){
            active = instance_find(enemy_o,active_i);
            delay = delay_time;
            //advance = 1;
        }
        
        if(active != null){
            active_tile = map[active.gridX, active.gridY];
            v1 = 0;
            check_telegraphs();
            reset_nodes();
            if(v1 == 0){
                move_range(active_tile, active.move);
            }
            else{
                animation = animation_time * 2;
                phase = "telegraph";
            }
        }
        
    }

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(phase == "move"){
    if(animation == 0){
        reset_nodes();
        if(show){
            move_range(active_tile, active.move);
            with(node_o){
                if(g != null){
                    color = c_aqua;
                }
            }
        }
        
        dest = null;
        target = null;
        
        if(turn == 1){
            
            
            if(hover.g != null){
                if(show)
                hover.color = c_blue;
                if(mouse_check_button_pressed(mb_left) &amp;&amp; (hover.occupant == null || hover.occupant == active)){
                    dest = hover;
                }
            }
            
        }
        else{   //turn 2
            if(delay &gt; 0){
                delay--;
            }
            else{
                for(a=0; a&lt;instance_number(ally_o); a++){
                    reset_nodes();
                    move_range(active_tile, active.move);
                    tmp = instance_find(ally_o,a);
                    enemy_acquisition(tmp, active.range_min, active.range_max);
                    
                    for(aa = 0; aa &lt; instance_number(node_o); aa++){
                        node = instance_find(node_o, aa);
                        if(node.h != null &amp;&amp; node.g != null &amp;&amp; (node.occupant == null || node.occupant == active)){
                            
                            if(dest == null){
                                dest = node;
                                target = tmp;
                            }
                            else if(node.g &gt; dest.g){
                                dest = node;
                                target = tmp;
                            }
                        }
                    }
                }
                
                if(dest == null){
                    navigate();
                    
                    for(i=0; i&lt;instance_number(ally_o); i++){
                        tmp = instance_find(ally_o,i);
                        node = map[tmp.gridX, tmp.gridY];
                        if(node.g != null){
                            if(dest == null){
                                dest = node;
                            }
                            else if(node.g &lt; dest.g){
                                dest = node;
                            }
                        }
                    }
                    
                    if(dest == null){
                        advance = 1;
                    }
                    else{
                        while(dest.g &gt; active.move || dest.occupant != null){
                            dest = dest.parent
                        }
                    }
                    
                    //advance = 1;
                }
                
                
                /*if(dest != null){
                    while(dest.occupant != null &amp;&amp; dest.parent != null){
                        dest = dest.parent;
                    }
                }*/
            }
        }
        
        
        if(dest != null){
            reset_nodes();
            
            active_tile.occupant = null;
            active_tile = map[dest.gridX, dest.gridY];
            dest.occupant = active;
            
            active.gridX = dest.gridX;
            active.gridY = dest.gridY;
            
            /*
            active.x = dest.x;
            active.y = dest.y;
            */
            
            //animation_time = 30;
            animation = animation_time;
            //delay = delay_time;
            x1 = active.x;
            y1 = active.y;
            x2 = dest.x;
            y2 = dest.y;
        }
        
        
    }
    else{
        animation--;
        
        active.x = x2 - (x2-x1)*(animation/animation_time);
        active.y = y2 - (y2-y1)*(animation/animation_time);
        
        if(animation &lt;= 0){
            advance = 1;
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(phase == "action"){
    
    if(turn == 1){
        reset_nodes();
        attack_gen();
        
        globalvar hover_option;
        hover_option = hover.option;
        
        
        
        with(node_o){
            if(option != null){
                color = c_aqua;
            }
            h = null;
            hh = null;
        }
        
        
        if(hover != null){
            if(hover.option != null){
                
                hover_cleave(hover);
                
                with(node_o){
                    if(option == hover_option){
                        color = c_blue;
                    }
                }
                
                if(mouse_check_button_pressed(mb_left) &amp;&amp; hover.option != null){
                    with(node_o){
                        if(option == hover_option){
                            attack_res();
                        }
                    }
                    advance = 1;
                }
            }
            
        }
    }
    else{   //turn 2
        hover_option = 0;
        
        if(delay &gt; 0){
            delay--;
            with(node_o){
                if(option != null){
                    color = $6666ff;
                }
            }
        }
        else{
            with(node_o){
                if(option == 0){
                    attack_res();
                }
            }
            advance = 1;
        }
        
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(phase == "telegraph"){
    if(animation &gt; 0){
        animation--;
        if(animation &gt; animation_time){
            v1 = $ff;
        }
        else{
            v1 = $8888ff - ($010100 * floor(animation*88/animation_time));
        }
    }
    else{
        telegraph_res();
        
        phase = "move";
        reset_nodes();
        move_range(active_tile, active.move);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_text(0,0,string(delay));

/*
if(delay == 0){
    draw_set_colour(c_orange);
    draw_line_width(active_tile.x, active_tile.y, active_tile.x+32, active_tile.y, 2);
    draw_line_width(active_tile.x+32, active_tile.y, active_tile.x+32, active_tile.y+32, 2);
    draw_line_width(active_tile.x+32, active_tile.y+32, active_tile.x, active_tile.y+32, 2);
    draw_line_width(active_tile.x, active_tile.y+32, active_tile.x, active_tile.y, 2);
}
*/

if(phase == "move" &amp;&amp; turn == 1 &amp;&amp; hover != null &amp;&amp; hover.g != null){
    node = hover;
    draw_set_colour(c_orange);
    while(node.parent != null){
        draw_line_width(node.x+16,node.y+16, node.parent.x+16,node.parent.y+16, 4);
        node = node.parent;
    }
}

if(phase == "action" &amp;&amp; turn == 2 &amp;&amp; delay &gt; 0 &amp;&amp; target != null){
    draw_set_colour(c_yellow);
    draw_line_width(active.x+16,active.y+16, target.x+16,target.y+16, 4);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
show *= -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
