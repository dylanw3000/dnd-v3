<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>node_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
neighbors = ds_list_create();
neighbors_ext = ds_list_create();
telegraphs = ds_list_create();

color = c_white;

occupant = null;
parent = null;
gridX = 0;
gridY = 0;

passable = true;
cost = 1;
type = "node";

alarm[0] = 1;

g = null;
h = null;
hh = null;

option = null;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
terrain = instance_position(x,y,terrain_o);
if(terrain){
    type = terrain.type;
    cost = terrain.cost;
    passable = terrain.passable;
    
    sprite_index = terrain.sprite_index;
    
    with(terrain){
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
color_show = color;

if(phase == "telegraph"){
    if(ds_list_find_index(telegraphs, active) != null){
        color_show = v1;
    }
    
}
else if(ds_list_size(telegraphs) &gt; 0){
    a = 0;
    both = 0;
    for(i=0; i&lt;ds_list_size(telegraphs); i++){
        tmp = ds_list_find_value(telegraphs, i);
        if(tmp.enemy){
            if(a &gt;= 0){
                a++;
            }
            else{
                both = 1;
                break;
            }
        }
        else{
            if(a &lt;= 0){
                a--;
            }
            else{
                both = 1;
                break;
            }
        }
    }
    
    if(both){
        switch(color){
            case c_white:
                color_show = $00bbff;
                break;
            case c_aqua:
                color_show = $ddff66;
                break
            case c_blue:
                color_show = $dd6644;
                break;
            case $6666ff:
                color_show = $2222ff;
                break;
                
            default:
                color_show = color + $222288;
                break;
        }
    }
    else if(a &gt; 0){
        switch(color){
            case c_white:
                color_show = $8888ff;
                break;
            case c_aqua:
                color_show = $dddd66;
                break
            case c_blue:
                color_show = $dd2244;
                break;
            case $6666ff:
                color_show = $2222ff;
                break;
                
            default:
                color_show = color + $222288;
                break;
        }
    }
    else if(a&lt;0){
        switch(color){
            case c_white:
                color_show = $88ff88;
                break;
            case c_aqua:
                color_show = $ddff22;
                break
            case c_blue:
                color_show = $dd4422;
                break;
            case $6666ff:
                color_show = $2222ff;
                break;
                
            default:
                color_show = color + $228822;
                break;
        }
    }
    /*
    if(ds_list_size(telegraphs) == 2){
        color_show -= $333333;
    }
    */
}

draw_sprite_ext(sprite_index,-1,x,y,1,1,0,color_show,1);

/*
if(option != null){
    draw_text(x,y,string(option));
}
*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
